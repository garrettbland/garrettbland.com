const htmlmin = require('html-minifier')
const lazyloadimages = require('@garrettbland/lazy-load-images')
const imagealttagcheck = require('@garrettbland/img-alt-tag-check')
const ErrorOverlay = require('eleventy-plugin-error-overlay')
const md = require('markdown-it')({ html: true })
const now = String(Date.now())

module.exports = function (eleventyConfig) {
    /**
     * Setup nice overlay so we are foreced to fix errors
     */
    eleventyConfig.setBrowserSyncConfig({
        ...eleventyConfig.browserSyncConfig,
    })
    eleventyConfig.addPlugin(ErrorOverlay)

    /**
     * Watch styles generated by tailwind
     */
    eleventyConfig.addWatchTarget('dist/style.css')

    /**
     * Watch markdown files in cms
     */
    eleventyConfig.addWatchTarget('cms/')

    /**
     * Pass directories & files to top level of dist
     * Add Alpine JS CDN build directly
     */
    eleventyConfig.addPassthroughCopy({ public: '/' })
    eleventyConfig.addPassthroughCopy({
        './node_modules/alpinejs/dist/cdn.min.js': '/alpine.js',
    })

    /**
     * Lets us use version in our site
     */
    eleventyConfig.addShortcode('version', function () {
        return now
    })

    /**
     * Filter to let us render makrdown
     */
    eleventyConfig.addFilter('markdown', function (value) {
        /**
         * Takes in raw markdown text and spits out html
         */
        return md.render(value)
    })

    /**
     * Validates that all images have an alt tag & value
     */
    eleventyConfig.addPlugin(imagealttagcheck)

    /**
     * Add native lazy loading to images
     */
    eleventyConfig.addPlugin(lazyloadimages)

    /**
     * Minify HTML
     */
    eleventyConfig.addTransform('htmlmin', (content, outputPath) => {
        if (outputPath.endsWith('.html')) {
            return htmlmin.minify(content, {
                useShortDoctype: true,
                removeComments: true,
                collapseWhitespace: true,
            })
        } else {
            return content
        }
    })

    return {
        passthroughFileCopy: true,
        dir: {
            input: 'src/pages',
            includes: '../_includes',
            layouts: '../_includes',
            data: '../_data',
            output: 'dist',
        },
    }
}
